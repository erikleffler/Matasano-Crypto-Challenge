     1                                  ;ISSUES
     2                                  ; LOADS INTO CONV_BUFF IN WRONG ORDER
     3                                  ; CRASHES AFTER CALL TO HEX_TO_BINARY HAS RETURNED
     4                                  
     5                                  global _start
     6                                  section .data
     7                                  
     8                                  	b64_table:
     9 00000000 414243444546474849-     		db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    10 00000009 4A4B4C4D4E4F505152-
    11 00000012 535455565758595A61-
    12 0000001B 62636465666768696A-
    13 00000024 6B6C6D6E6F70717273-
    14 0000002D 7475767778797A3031-
    15 00000036 32333435363738392B-
    16 0000003F 2F                 
    17                                  
    18                                  section .bss
    19                                  	
    20                                  	BUFFLEN equ 3072
    21 00000000 <res 00000C00>          	Buff resb BUFFLEN
    22                                  
    23 00000C00 <res 00000003>          	Conv_Buff resb 3	
    24                                  
    25                                  section .text
    26                                  _start:
    27                                  	
    28 00000000 90                      	nop			; for debugging
    29                                  
    30 00000001 E868000000              	call read_buff		; fill buffer 
    31 00000006 4831C9                  	xor rcx, rcx		; clear rcx
    32                                  .conv_loop:
    33 00000009 488D0449                	lea rax, [rcx*3] 	; index from which to read from buff
    34 0000000D 48D1E0                  	shl rax, 1
    35 00000010 4889F3                  	mov rbx, rsi		; stor rsi in rbc for manipulating
    36 00000013 4829C3                  	sub rbx, rax		; if rbx - rax = 1 then we are at EOF
    37 00000016 4883FB01                	cmp rbx, 1		; check to see if we have read entire buff
    38 0000001A 7632                    	jbe write		; if so, write out
    39 0000001C 488D98[00000000]        	lea rbx, [Buff+rax]	; adress from which to read in buff
    40 00000023 E86B000000              	call hex_to_binary	
    41 00000028 488D048D00000000        	lea rax, [rcx*4]	; index from which to right into buff
    42 00000030 488D98[00000000]        	lea rbx, [Buff+rax]	; address from which to write into buff
    43 00000037 E8EB000000              	call binary_to_b64
    44 0000003C 48FFC1                  	inc rcx			; conv next set of vals
    45 0000003F EBC8                    	jmp .conv_loop
    46 00000041 90                      	nop			; for debugging
    47                                  
    48                                  ; writes rsi bytes from Buff to sdtout and exits
    49                                  exit:
    50 00000042 B801000000              	mov rax, 1
    51 00000047 BF00000000              	mov rdi, 0
    52 0000004C CD80                    	int 0x80
    53                                  
    54                                  write:
    55 0000004E 488D148D00000000        	lea rdx, [rcx * 4]	; char read in rsi
    56 00000056 B804000000              	mov rax, 4		; specify sys write
    57 0000005B BB01000000              	mov rbx, 1		; specify stdout
    58 00000060 48B9-                   	mov rcx, Buff		; specify from where to  write from
    59 00000062 [0000000000000000] 
    60 0000006A CD80                    	int 80H 
    61 0000006C EB92                    	jmp _start		; restart after write
    62                                  
    63                                  ; Read BUFFLEN bytes from stdin and stor in Buff
    64                                  read_buff:
    65 0000006E B803000000              	mov rax, 3		; specify sys_read
    66 00000073 BB00000000              	mov rbx, 0		; specify stdin
    67 00000078 48B9-                   	mov rcx, Buff		; store result in Buff
    68 0000007A [0000000000000000] 
    69 00000082 BA000C0000              	mov rdx, BUFFLEN	; read BUFFLEN characters
    70 00000087 CD80                    	int 0x80
    71 00000089 4889C6                  	mov rsi, rax		; save number of bytes read
    72 0000008C 4883F800                	cmp rax, 0		; check return of sys_read for EOF
    73 00000090 74B0                    	je exit			; If EOF is read call exit
    74 00000092 C3                      	ret
    75                                  
    76                                  ; Conv six hexvalues into a 3 byte binary number and stor in Conv_Buff
    77                                  ; Pass read adress in rbx. Reads from right to left
    78                                  ; stores value in conv_buff
    79                                  hex_to_binary:
    80 00000093 50                      	push rax		; preserve register value
    81 00000094 51                      	push rcx		; preserve register value
    82 00000095 52                      	push rdx		; preserve register value
    83 00000096 4831C0                  	xor rax, rax		; zero out rax for usage
    84 00000099 B906000000              	mov rcx, 6		; counter
    85                                  .get_hex_val:
    86 0000009E 48FFC9                  	dec rcx			; decrement counter
    87 000000A1 BF02000000              	mov rdi, 2		; for balancing counter into conv_buff later
    88 000000A6 803C0B04                	cmp byte [rbx+rcx], 4	; if ascii value is 4, we have reached eof
    89 000000AA 7477                    	je .ret			; jump to error if the passed string isn't hex
    90 000000AC 803C0B30                	cmp byte [rbx+rcx], 48	; if ascii value is lower than 48 it is not hex
    91 000000B0 0F82CC000000            	jb error		; jump to error if the passed string isn't hex
    92 000000B6 803C0B3A                	cmp byte [rbx+rcx], 58	; if ascii value is lower than 58 it is a digit
    93 000000BA 7220                    	jb .digit
    94 000000BC 803C0B41                	cmp byte [rbx+rcx], 65	; if ascii value is lower -> not hex
    95 000000C0 0F82BC000000            	jb error
    96 000000C6 803C0B47                	cmp byte [rbx+rcx], 71	; if ascii value is lower than 91 it is a uppercaset
    97 000000CA 7219                    	jb .uppercase
    98 000000CC 803C0B61                	cmp byte [rbx+rcx], 97	; if ascii value is lower -> not hex
    99 000000D0 0F82AC000000            	jb error
   100 000000D6 803C0B67                	cmp byte [rbx+rcx], 103	; if ascii value is lower than 91 it is a lowercaset
   101 000000DA 7212                    	jb .lowercase
   102                                  
   103                                  .digit:
   104 000000DC 8A040B                  	mov al, [rbx+rcx]	; store ascii in rax
   105 000000DF 4883E830                	sub rax, 48		; turn hex-ascii value in to binary value
   106 000000E3 EB12                    	jmp .store		; store the value in conv_buff
   107                                  
   108                                  .uppercase:
   109 000000E5 8A040B                  	mov al, [rbx+rcx]	; store ascii in rax
   110 000000E8 4883E837                	sub rax, 55		; turn hex-ascii value in to binary value
   111 000000EC EB09                    	jmp .store		; store the value in conv_buff
   112                                  
   113                                  .lowercase:
   114 000000EE 8A040B                  	mov al, [rbx+rcx]	; store ascii in rax
   115 000000F1 4883E857                	sub rax, 87		; turn hex-ascii value in to binary value
   116 000000F5 EB00                    	jmp .store		; store the value in conv_buff
   117                                  
   118                                  .store:
   119 000000F7 4889CA                  	mov rdx, rcx		; store rcx in rdx for manipualtion
   120 000000FA 48D1EA                  	shr rdx, 1		; retrieve the correct index to insert into conv_buff
   121 000000FD 4829D7                  	sub rdi, rdx		; the correct index into conv_buff
   122 00000100 48F7C101000000          	test rcx, 1		; check to see if rcx is even
   123 00000107 750A                    	jnz .cont_store		; if it is odd, dont shift to upper 4 bits
   124 00000109 48C1E004                	shl rax, 4		; if it is not, store the hexval in upper 4 bits of byte-space
   125 0000010D 0287[000C0000]          	add al, [Conv_Buff+rdi]	; retrieve the lower 4 bits and add aswell
   126                                  .cont_store:
   127 00000113 8887[000C0000]          	mov byte [Conv_Buff+rdi], al	; store result in conv_buff
   128 00000119 4883F900                	cmp rcx, 0		; check if we are done
   129 0000011D 0F857BFFFFFF            	jnz .get_hex_val	; if not, repeat
   130                                  .ret:
   131 00000123 5A                      	pop rdx			; restore rcx
   132 00000124 59                      	pop rcx			; restore rcx
   133 00000125 58                      	pop rax			; restore rax
   134 00000126 C3                      	ret			; return
   135                                  
   136                                  ; Converts a 3 byte binary number to a 4 digit base64 number
   137                                  ; Pass number to convert in conv_buff
   138                                  ; Writes base64 number to rbx
   139                                  binary_to_b64:
   140 00000127 51                      	push rcx		; preserve register
   141 00000128 50                      	push rax		; preserve register
   142 00000129 4831C0                  	xor rax, rax		; clear rax
   143 0000012C 488B0C25[000C0000]      	mov rcx, [Conv_Buff]	; move binary val to rcx
   144 00000134 4889C8                  	mov rax, rcx		; move binary val to rax
   145 00000137 4883E03F                	and rax, 0x3f		; mask out all but lower 6 bits
   146 0000013B 8A80[00000000]          	mov al, [b64_table + rax]
   147 00000141 884303                  	mov byte [rbx+3], al 	; write b64 value
   148 00000144 4889C8                  	mov rax, rcx		; move binary val to rax
   149 00000147 48C1E806                	shr rax, 6		; shift rax to lower 6 bits
   150 0000014B 4883E03F                	and rax, 0x3f	; mask out all but lower 6 bits
   151 0000014F 8A80[00000000]          	mov al, [b64_table + rax]
   152 00000155 884302                  	mov byte [rbx+2], al	; write b64 value
   153 00000158 4889C8                  	mov rax, rcx		; move binary val to rax
   154 0000015B 48C1E80C                	shr rax, 12		; shift rax to lower 6 bits
   155 0000015F 4883E03F                	and rax, 0x3f		; mask out all but lower 6 bits
   156 00000163 8A80[00000000]          	mov al, [b64_table + rax]
   157 00000169 884301                  	mov byte [rbx+1], al	; write b64 value
   158 0000016C 4889C8                  	mov rax, rcx		; move binary val to rax
   159 0000016F 48C1E812                	shr rax, 18		; shift rax to lower 6 bits
   160 00000173 4883E03F                	and rax, 0x3f	; mask out all but lower 6 bits
   161 00000177 8A80[00000000]          	mov al, [b64_table + rax]
   162 0000017D 8803                    	mov byte [rbx], al	; write b64 value
   163 0000017F 58                      	pop rax		; restore register
   164 00000180 59                      	pop rcx		; restore register
   165 00000181 C3                      	ret
   166                                  
   167                                  
   168                                  error:
   169 00000182 B801000000              	mov rax, 1		; specify sys_exit
   170 00000187 BF01000000              	mov rdi, 1		; error
   171 0000018C CD80                    	int 0x80
